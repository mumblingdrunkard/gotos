= Golang Teaching OS - gotos (wip)

A framework to teach the concepts of Operating Systems.
Build your very own operating system around emulated hardware.
Arguably, the most important thing that can come out of this project is the system specification.

If an implementation follows the system specification, processes running ON the emulated, virtualized hardware should run flawlessly, albeit with better or worse performance depending on the implementation.

This project is built around emulating a RISC-V CPU and some generic hardware for I/O.
The CPU runs exclusively in User/Application Mode see _The RISC-V Instruction Set Manual: Volume II: Privileged Spec_ <<rv5vol2>> from https://riscv.org/technical/specifications/ , handing control over to the surrounding system (written in Go) when elevated/enhanced privileges are needed such as when performing syscalls.

== Roadmap

=== Emulation

==== riscv32g target

- [ ] RV32I base instructions (37/40)
- [*] RV32M extension (8/8)
- [ ] RV32A extension (0/11)
- [ ] RV32F extension (0/26)
- [ ] RV32D extension (0/26)
- [ ] Zicsr extension (0/6)
- [ ] Zifencei extension (0/1)

==== Peripherals

- [ ] MMIO

=== OS

* [ ] Syscalls
** [*] `void _Noreturn sys_exit(int)`

* [ ] Synchronization primitives

* [ ] C standard library

* [ ] Scheduler

* [ ] MMU

* [ ] Filesystem

=== Applications

* [ ] Shell

== Current state

The `locktest` program being run shares a mutex and a counter between four cores/threads.
All of them loop 1024 times each, locking the mutex, incrementing the counter, then unlocking the mutex.
The cores then lock/read/unlock the value and return the read value.
At least one core is guaranteed to return 4096 (4 * 1024) which can be read as `0x00001000` in register `[10]`.

Part of the mutex implementation is taken from figure 8.2 in the RISC-V specification. <<rv5vol1>>

== Contributing

As this is an active thesis project, I'm uncertain of how much "help" I'm allowed.
However, feel free to pull the project, inspect the code, check for bugs etc..
If you find any bugs (highly ilkely), I would appreciate an issue on GitLab or just a mail to mumblingdrunkard@protonmail.com.


== Authors and acknowledgment

.Authors
- mumblingdrunkard

== License

This project is licensed under the traditional MIT license.

[bibliography]
== Bibliography

- [[[rv5vol1]]] Andrew Waterman, Krste Asanović, John Hauser.
_RISC-V ISA Specification: Volume 1, Unprivileged ISA v. 20191213_

- [[[rv5vol2]]] Andrew Waterman, Krste Asanović, John Hauser.
_RISC-V ISA Specification: Volume 2, Privileged Spec v. 20211203_
