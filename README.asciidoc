= Golang Teaching OS - gotos (wip)

[NOTE]
====
The original idea was conceived of before I learned about _The Nachos Instructional Operating System_ <<nachos>>, but the core idea is very similar.
====

A framework to teach the concepts of Operating Systems.
Build your very own operating system around emulated hardware.
Arguably, the most important thing that can come out of this project is the system specification.

If an implementation follows the system specification, processes running ON the emulated, virtualized hardware should run flawlessly, albeit with better or worse performance depending on the implementation.

This project is built around emulating a RISC-V CPU and some generic hardware for I/O.
The CPU runs exclusively in User/Application Mode see _The RISC-V Instruction Set Manual: Volume II: Privileged Spec_ <<rv5vol2>> from https://riscv.org/technical/specifications/ , handing control over to the surrounding system (written in Go) when elevated/enhanced privileges are needed such as when performing syscalls.

I make it a point to follow the RISC-V specification as much as possible, taking inspiration wherever possible.
Note however that this is not intended to be a full RISC-V emulator.
It will not be able to run full systems like xv6 like https://github.com/d0iasm/rvemu[rvemu] <<rvemu>> is able to.


== Roadmap

=== Emulation

==== riscv32g target

- [*] RV32I base instructions (40/40)
- [*] RV32M extension (8/8)
- [*] RV32A extension (11/11)
- [*] RV32F extension (26/26) non-compliant
- [*] RV32D extension (26/26) non-compliant
- [*] Zicsr extension (6/6)
- [*] Zifencei extension (1/1)

==== Peripherals

- [ ] MMIO

=== OS

* [ ] Exception handling

* [ ] Syscalls

* [ ] C standard library

* [ ] Scheduler

* [ ] Memory management

* [ ] Filesystem

=== Applications

* [ ] Shell

== Current state

The `locktest` program shares a counter between four cores, all of them atomically incrementing the counter in a loop.
This is achieved by a core acquiring a shared mutex, updating the value, then releasing the mutex.
Upon acquiring a mutex, the cache needs to be invalidated in case shared data is updated.
Upon releasing the mutex, the cache needs to be flushed so that other cores can fetch this new data.
This leads to a lot of cache misses, but is required to ensure coherence.
This nicely illustrates the idea that behaviour in C can be undefined when shared data is not properly handled.
At least one core is bound to end with the final result `1024 * 16 * 4 = 0x00010000` placed in register `[10]`.

On my 4-core i7 1065G7, this program takes slightly more than 1 whole second to run.
That's pretty slow for a measly 65000 lock/unlock operations.
A better approach would be to use atomic operations as much as possible.
RISC-V has multiple atomic operations, check out the A extension in the RISC-V spec for more info.

== Fun jobs that need doing

- [ ] Fully define the system interface (RISC-V EEI)

- [ ] Write an ELF parser to load programs (look at `debug/elf`)

- [ ] Define a framework for the process labs

- [ ] Define a framework for the memory labs

- [ ] Define a framework for the file system lab

- [ ] Write companion book for gotos

- [ ] Write companion book for the labs

== Dirty (un-fun) jobs that need doing

- [ ] Unit testing all instructions thoroughly.

- [ ] Integration testing all instructions thoroughly.

- [ ] Testing instruction decoding.

- [ ] Write thorough amount of tests for all labs to ensure students implementations are working.

== Contributing

As this is an active thesis project, I'm uncertain of how much "help" I'm allowed.
However, feel free to pull the project, inspect the code, check for bugs etc..
If you find any bugs (highly ilkely), I would appreciate an issue on GitLab or just a mail to mumblingdrunkard@protonmail.com.

== Authors and acknowledgment

.Authors
- mumblingdrunkard

== License

This project is licensed under the traditional MIT license.

[bibliography]
== Bibliography

- [[[rv5vol1]]] Andrew Waterman and Krste Asanović.
    _RISC-V ISA Specification: Volume I, Unprivileged ISA v. 20191213_,
    https://riscv.org/technical/specifications/

- [[[rv5vol2]]] Andrew Waterman, Krste Asanović, and John Hauser.
    _RISC-V ISA Specification: Volume II, Privileged Spec v. 20211203_,
    https://riscv.org/technical/specifications/

- [[[nachos]]] Wayne A. Christopher, Steven J. Procter, and Thomas E. Anderson,
    _The Nachos Instructional Operating System_,
    https://homes.cs.washington.edu/~tom/nachos/

- [[[rvemu]]] Asami Doi,
    _rvemu: RISC-V Emulataor_,
    https://github.com/d0iasm/rvemu
